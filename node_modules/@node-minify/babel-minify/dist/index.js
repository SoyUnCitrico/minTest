"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/index.ts
var import_babel_core = require("babel-core");
var import_babel_preset_minify = __toESM(require("babel-preset-minify"));
var import_utils = require("@node-minify/utils");
var minifyBabel = ({ settings, content, callback, index }) => {
  let babelOptions = {
    presets: []
  };
  if (settings?.options?.babelrc) {
    babelOptions = JSON.parse(import_utils.utils.readFile(settings.options.babelrc));
  }
  if (settings?.options?.presets) {
    const babelrcPresets = babelOptions.presets || [];
    babelOptions.presets = babelrcPresets.concat(
      Array.isArray(settings.options.presets) ? settings.options.presets : []
    );
  }
  if (babelOptions.presets.indexOf("minify") === -1) {
    babelOptions.presets = babelOptions.presets.concat([import_babel_preset_minify.default]);
  }
  const contentMinified = (0, import_babel_core.transform)(content ?? "", babelOptions);
  if (settings && !settings.content && settings.output) {
    settings.output && import_utils.utils.writeFile({ file: settings.output, content: contentMinified.code, index });
  }
  if (callback) {
    return callback(null, contentMinified.code);
  }
  return contentMinified.code;
};
minifyBabel.default = minifyBabel;
module.exports = minifyBabel;
/*!
 * node-minify
 * Copyright(c) 2011-2023 Rodolphe Stoclin
 * MIT Licensed
 */
//# sourceMappingURL=index.js.map